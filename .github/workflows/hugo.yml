name: Deploy Selora Homes Hugo Site to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.150.0
      NODE_VERSION: "18"
      # Optional: set to a domain like "www.example.com" to deploy at the root of that domain
      # Configure this in GitHub Actions Variables or override in a workflow_dispatch run
      CUSTOM_DOMAIN: ""
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install Node.js dependencies
        run: |
          if [[ -f package-lock.json || -f npm-shrinkwrap.json ]]; then
            npm ci
          else
            npm install
          fi

      - name: Build Tailwind CSS
        run: |
          npx tailwindcss -i ./assets/css/input.css -o ./static/css/style.css --minify

      - name: Verify Tailwind CSS build
        run: |
          if [ ! -f "./static/css/style.css" ]; then
            echo "Error: Tailwind CSS build failed - style.css not found"
            exit 1
          fi
          echo "Tailwind CSS built successfully:"
          ls -la ./static/css/style.css

      - name: Choose base URL
        id: choose_baseurl
        run: |
          if [ -n "${CUSTOM_DOMAIN}" ]; then
            echo "Using custom domain: ${CUSTOM_DOMAIN}"
            echo "base_url=https://${CUSTOM_DOMAIN}" >> "$GITHUB_OUTPUT"
          else
            echo "Using GitHub Pages base_url output"
            echo "base_url=${{ steps.pages.outputs.base_url }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          echo "Building with baseURL: ${{ steps.choose_baseurl.outputs.base_url }}/"
          hugo \
            --gc \
            --minify \
            --cleanDestinationDir \
            --baseURL "${{ steps.choose_baseurl.outputs.base_url }}/"

      - name: Add CNAME for custom domain
        if: env.CUSTOM_DOMAIN != ''
        run: |
          echo "${CUSTOM_DOMAIN}" > ./public/CNAME

      - name: Optimize build output
        run: |
          echo "Build completed. Public directory contents:"
          ls -la ./public/

          echo "Checking for CSS files:"
          find ./public -name "*.css" -type f

          echo "Checking build size:"
          du -sh ./public/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment verification
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"

          # Wait a moment for deployment to propagate
          sleep 10

          # Verify the site is accessible
          if curl -sSf "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Site is accessible and responding"
          else
            echo "⚠️  Site may still be propagating"
          fi
